Hello Partner!

This is the flow how to auth your customer in Brizy editor.

1. You need to get your personal user information like 
{ user ID, token }
They usually looks like userId = 4083, token = 601ded5249ed2aa9xfasa7d09s305dh29b54f8908b65ef542da4299d8ea5cbe

2. Just send get request to brizy.cloud/multipass/{Your user Id} with some `GET` variable.
3. If data are vaild - get back redirect to editor.

  We need to know which customer you want to show editor and do some time validation for security purpose.
So, you need to encrypt customer email and time when you create this request in ISO6801 format. You can encrypt it with Multipass.php file that
implement all functions that you need.

Example:
  1.Create json with data
      $userData = [
        'created_at' => (new \DateTime())->format(\DateTime::ISO8601),
        'email' => 'orachimaru1998@gmail.com'
    ];

  2. Encrypt it with Multipass.php
```
  $multiPass = new Multipass(token); // token that you get with your user ID
  $token = $multiPass->encode($userData);
// DONE! $token contains you encrypted customer data and time sending and now you can send it to us 
```
3. Send json with encrypted data to Brizy server
```
  $token = ['token' => $token] // please put you $token in json
  $curl = curl_init("http://www.brizy.cloud/multipass/4083"); // put your userId in link
    curl_setopt($curl,  CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $token); // put you get variable in request
    return curl_exec($curl); // send 

This curl exec returns you redirect in Editor. It is done!
```

Example class that does things described below:
Put it in the same directory as Multipass.php 

<?php
use App\Multipass;
require_once('Multipass.php');

const SECRET_KEY = "601ded5249ed2aad1faa7d099305d29b54f85908b6dfef542da4299d48ea5cbe";

function getUserId()
{
    return '4010' ;
}

function getCustomerEmail()
{
    return 'orachimaru1998@gmail.com';
}

function initToken()
{
    $userData = [
        'created_at' => (new \DateTime())->format(\DateTime::ISO8601),
        'email' => getCustomerEmail()
    ];

    $multiPass = new Multipass(SECRET_KEY);

    return $multiPass->encode($userData);
}

function multiPassAuth()
{
    $token = ['token' => initToken()];

    $curl = curl_init("http://www.brizy-cloud.com/multipass/" . getUserId());
    curl_setopt($curl,  CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $token);
    return curl_exec($curl);
}

$x = multiPassAuth();


---- Multipass.php
<?php

namespace App;

class Multipass {

    private $signature_key;

    private $encryption_key;

    private $init_vector;

    public function __construct($secret_key)
    {
        $key_material = hash("SHA256", $secret_key, true);

        $this->encryption_key = substr($key_material, 0, 16);
        $this->signature_key  = substr($key_material, 16, 16);

        $iv_material = hash("SHA256", $this->encryption_key, true);

        $this->init_vector = substr($iv_material, 0, 16);
    }

    /**
     * Converts and signs a PHP object or array into a JWT string.
     *
     * @param object|array  $payload    PHP object or array
     *
     * @return string A signed JWT
     *
     * @uses jsonEncode
     * @uses urlsafeB64Encode
     */
    public function encode($payload)
    {
        $segments = array();

        $segments[] = $this->urlsafeB64Encode($this->encrypt(json_encode($payload), $this->encryption_key, $this->init_vector));
        $signing_input = implode('.', $segments);

        $signature = $this->sign($signing_input, $this->signature_key);
        $segments[] = $this->urlsafeB64Encode($signature);

        return implode('.', $segments);
    }

    /**
     * Sign a string with a given key and algorithm.
     *
     * @param string            $msg    The message to sign
     * @param string|resource   $key    The secret key
     *
     * @return string An encrypted message
     *
     */
    private function sign($msg, $key)
    {
        return hash_hmac('SHA256', $msg, $key, true);
    }

    /**
     * Encode a string with URL-safe Base64.
     *
     * @param string $input The string you want encoded
     *
     * @return string The base64 encode of what you passed in
     */
    private function urlsafeB64Encode($input)
    {
        return str_replace('=', '', strtr(base64_encode($input), '+/', '-_'));
    }

    /**
     * Encrypt a string with AES-128-CBC
     *
     * @param string    $json_payload   The data
     * @param string    $encryption_key The secret encryption key
     * @param string    $init_vector    A non-NULL Initialization Vector
     *
     * @return string An encrypted data
     */
    private function encrypt($json_payload, $encryption_key, $init_vector)
    {
        return openssl_encrypt($json_payload, 'AES-128-CBC' , $encryption_key, OPENSSL_RAW_DATA, $init_vector);
    }
}

Run php main.php - or any name that you give to your first php class

p.s. Fast test. run initToken() to get token and just send in browser following link:
brizy.cloud/multipass/{yourUserId}?token={$token from iniToken()} -> this link is the same get request, so you should be redirected to editor if everything is fine.






